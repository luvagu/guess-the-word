{"version":3,"sources":["components/Hanger.jsx","components/body-parts/Head.jsx","components/body-parts/Neck.jsx","components/body-parts/LeftArm.jsx","components/body-parts/RightArm.jsx","components/body-parts/Torso.jsx","components/body-parts/LeftLeg.jsx","components/body-parts/RightLeg.jsx","components/LoseMsg.jsx","components/body-parts/Body.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["Hanger","className","Head","Neck","LeftArm","RightArm","Torso","LeftLeg","RightLeg","LooseMsg","looser","Body","numOfBodyPartsToShow","bodyParts","slice","LoseMsg","PLAYERS","switchTurns","currentTurn","App","useState","remainigLifes","setRemainigLifes","bodyPartsToShow","setBodyPartsToShow","secretWord","setSecretWord","splitSecretWord","setSplitSecretWord","gameStarted","setGameStarted","roundEnded","setRoundEnded","prevGuesses","setPrevGuesses","Math","floor","random","length","challenger","setChallenger","opponent","setOpponent","winner","setWinner","red","blue","scores","setScores","letterInput","useRef","useEffect","prevScores","map","idx","letter","discovered","type","onClick","ref","maxLength","placeholder","onChange","e","target","value","toLowerCase","current","blur","includes","newSplitSecretWord","obj","every","winnerScore","wrongLetters","onSubmit","preventDefault","splitWord","split","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24943c54.chunk.js","sourcesContent":["function Hanger() {\r\n  return <div className='hanger' />\r\n}\r\n\r\nexport default Hanger\r\n","function Head() {\r\n\treturn <div className='head' />\r\n}\r\n\r\nexport default Head\r\n","function Neck() {\r\n\treturn <div className='neck' />\r\n}\r\n\r\nexport default Neck\r\n","function LeftArm() {\r\n\treturn <div className='left-arm' />\r\n}\r\n\r\nexport default LeftArm\r\n","function RightArm() {\r\n  return <div className='right-arm' />\r\n}\r\n\r\nexport default RightArm\r\n","function Torso() {\r\n\treturn <div className='torso' />\r\n}\r\n\r\nexport default Torso\r\n","function LeftLeg() {\r\n  return <div className='left-leg' />\r\n}\r\n\r\nexport default LeftLeg\r\n","function RightLeg() {\r\n  return <div className='right-leg' />\r\n}\r\n\r\nexport default RightLeg\r\n","function LooseMsg({ looser }) {\r\n\treturn <div className={`loose-msg bg-${looser}`}>You Lose!</div>\r\n}\r\n\r\nexport default LooseMsg\r\n","import Hanger from '../Hanger'\r\nimport Head from './Head'\r\nimport Neck from './Neck'\r\nimport LeftArm from './LeftArm'\r\nimport RightArm from './RightArm'\r\nimport Torso from './Torso'\r\nimport LeftLeg from './LeftLeg'\r\nimport RightLeg from './RightLeg'\r\nimport LoseMsg from '../LoseMsg'\r\n\r\nfunction Body({ numOfBodyPartsToShow }) {\r\n\tconst bodyParts = [\r\n\t\t<Head key='Head' />,\r\n\t\t<Neck key='Neck' />,\r\n\t\t<LeftArm key='LeftArm' />,\r\n\t\t<RightArm key='RightArm' />,\r\n\t\t<Torso key='Torso' />,\r\n\t\t<LeftLeg key='LeftLeg' />,\r\n\t\t<RightLeg key='RightLeg' />,\r\n\t]\r\n\t\r\n\treturn (\r\n\t\t<div className='body-container'>\r\n\t\t\t<Hanger />\r\n\t\t\t{numOfBodyPartsToShow > 0 && bodyParts.slice(0, numOfBodyPartsToShow)}\r\n\t\t\t{numOfBodyPartsToShow === 7 && <LoseMsg />}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Body\r\n","import { useEffect, useRef, useState } from 'react'\nimport Body from './components/body-parts/Body'\n\nconst checkWin = word => word.every(({ discovered }) => discovered === true)\n\nconst PLAYERS = ['red', 'blue']\n\nconst getRandomPlayerTurn = () =>\tPLAYERS[Math.floor(Math.random() * PLAYERS.length)]\n\nconst switchTurns = currentTurn => (currentTurn === 'red' ? 'blue' : 'red')\n\nfunction App() {\n\tconst [remainigLifes, setRemainigLifes] = useState(7)\n\tconst [bodyPartsToShow, setBodyPartsToShow] = useState(0)\n\tconst [secretWord, setSecretWord] = useState('')\n\tconst [splitSecretWord, setSplitSecretWord] = useState([])\n\tconst [gameStarted, setGameStarted] = useState(false)\n\tconst [roundEnded, setRoundEnded] = useState(false)\n\tconst [prevGuesses, setPrevGuesses] = useState('')\n\tconst [challenger, setChallenger] = useState(getRandomPlayerTurn())\n\tconst [opponent, setOpponent] = useState(switchTurns(challenger))\n\tconst [winner, setWinner] = useState('')\n\tconst [scores, setScores] = useState({ red: 0, blue: 0 })\n\n\tconst letterInput = useRef()\n\n\tconst handleSubmit = e => {\n\t\te.preventDefault()\n\n\t\tif (secretWord) {\n\t\t\tconst splitWord = secretWord\n\t\t\t\t.split('')\n\t\t\t\t.map(letter => ({ letter, discovered: false }))\n\t\t\tsetSplitSecretWord(splitWord)\n\t\t\tsetGameStarted(true)\n\t\t}\n\t}\n\n\tconst checkInSecretWord = e => {\n\t\tconst letter = e.target.value.toLowerCase()\n\t\tletterInput.current.blur()\n\t\tif (secretWord.includes(letter)) {\n\t\t\tconst newSplitSecretWord = [...splitSecretWord].map(obj => {\n\t\t\t\tif (obj.letter === letter) obj.discovered = true\n\t\t\t\treturn obj\n\t\t\t})\n\t\t\tsetSplitSecretWord(newSplitSecretWord)\n\t\t\tif (checkWin(splitSecretWord)) {\n\t\t\t\tconst winnerScore = scores[opponent] + 1\n\t\t\t\tsetScores({ ...scores, [opponent]: winnerScore })\n\t\t\t\tsetRoundEnded(true)\n\t\t\t\tsetWinner(opponent)\n\t\t\t}\n\t\t} else {\n\t\t\tsetRemainigLifes(remainigLifes - 1)\n\t\t\tsetBodyPartsToShow(bodyPartsToShow + 1)\n\t\t\tconst wrongLetters =\n\t\t\t\tprevGuesses.length > 0 ? `${prevGuesses}-${letter}` : letter\n\t\t\tsetPrevGuesses(wrongLetters)\n\t\t}\n\t}\n\n\tconst resetGame = () => {\n\t\tsetGameStarted(false)\n\t\tsetRoundEnded(false)\n\t\tsetRemainigLifes(7)\n\t\tsetBodyPartsToShow(0)\n\t\tsetPrevGuesses('')\n\t\tsetChallenger(switchTurns(challenger))\n\t\tsetOpponent(switchTurns(opponent))\n\t}\n\n\tuseEffect(() => {\n\t\tif (remainigLifes === 0) {\n\t\t\tsetRoundEnded(true)\n\t\t\tsetWinner(challenger)\n\t\t\tsetScores(prevScores => ({\n\t\t\t\t...prevScores,\n\t\t\t\t[challenger]: prevScores[challenger] + 1,\n\t\t\t}))\n\t\t}\n\t}, [remainigLifes, challenger])\n\n\treturn (\n\t\t<div className='wrapper'>\n\t\t\t<header>\n\t\t\t\t<h1>Guess The Word</h1>\n\t\t\t\t<div className='scores'>\n\t\t\t\t\t<span className='blue'>{scores.blue} Blue</span>\n\t\t\t\t\t<span>vs</span>\n\t\t\t\t\t<span className='red'>Red {scores.red}</span>\n\t\t\t\t</div>\n\t\t\t</header>\n\t\t\t<aside>\n\t\t\t\t<Body numOfBodyPartsToShow={bodyPartsToShow} />\n\t\t\t</aside>\n\t\t\t<article>\n\t\t\t\t{gameStarted ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<div className='secret-word'>\n\t\t\t\t\t\t\t{splitSecretWord.map(({ letter, discovered }, idx) => (\n\t\t\t\t\t\t\t\t<div key={idx} className='secret-letter'>\n\t\t\t\t\t\t\t\t\t{discovered ? letter : <span className='red'>?</span>}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='letter-input'>\n\t\t\t\t\t\t\t{roundEnded ? (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t<span className={winner}>{winner}</span> wins!\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t{winner === challenger && (\n\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\tSecret word was: <span>{secretWord}</span>\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t<button type='button' onClick={resetGame}>\n\t\t\t\t\t\t\t\t\t\tStart New Round\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tref={letterInput}\n\t\t\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\t\t\tmaxLength='1'\n\t\t\t\t\t\t\t\t\tplaceholder='Enter guess'\n\t\t\t\t\t\t\t\t\tonChange={checkInSecretWord}\n\t\t\t\t\t\t\t\t\tonClick={e => (e.target.value = '')}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t<span className={opponent}>{opponent}</span>'s lifes left:{' '}\n\t\t\t\t\t\t\t\t{remainigLifes}\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t{prevGuesses && (\n\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\tWrong guesses: <span>{prevGuesses}</span>\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tIt&apos;s <span className={challenger}>{challenger}</span>&apos;s\n\t\t\t\t\t\t\tturn to challenge <span className={opponent}>{opponent}</span>!\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\t\tplaceholder='Enter secret word'\n\t\t\t\t\t\t\t\tonChange={e => setSecretWord(e.target.value.toLowerCase())}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<button type='submit'>Save</button>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</article>\n\t\t</div>\n\t)\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}