{"version":3,"sources":["components/Container.jsx","components/Header.jsx","components/Sidebar.jsx","components/Content.jsx","components/Hanger.jsx","components/body-parts/Head.jsx","components/body-parts/Neck.jsx","components/body-parts/LeftArm.jsx","components/body-parts/RightArm.jsx","components/body-parts/Torso.jsx","components/body-parts/LeftLeg.jsx","components/body-parts/RightLeg.jsx","components/LoseMsg.jsx","components/Body.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["Container","children","className","Header","scores","blue","red","Sidebar","Content","Hanger","Head","Neck","LeftArm","RightArm","Torso","LeftLeg","RightLeg","LooseMsg","loser","Body","numOfBodyPartsToShow","bodyParts","slice","LoseMsg","PLAYERS","splitWordCovertToObject","word","split","map","letter","discovered","switchTurns","currentTurn","App","num","useState","remainigLifes","setRemainigLifes","bodyPartsToShow","setBodyPartsToShow","secretWord","setSecretWord","splitSecretWord","setSplitSecretWord","clue","setClue","gameStarted","setGameStarted","roundEnded","setRoundEnded","prevGuesses","setPrevGuesses","Math","floor","random","length","challenger","setChallenger","opponent","setOpponent","winner","setWinner","setScores","loading","error","apiStatus","setApiStatus","letterInput","useRef","getRandomWord","a","prevStatus","fetch","response","json","data","definition","toLowerCase","console","log","message","useEffect","prevScores","idx","type","onClick","ref","maxLength","placeholder","onChange","e","target","value","current","blur","includes","newSplitSecretWord","obj","every","winnerScore","wrongLetters","Array","fill","heart","onSubmit","preventDefault","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d8ef173.chunk.js","sourcesContent":["function Container({ children }) {\r\n\treturn <div className='wrapper' children={children} />\r\n}\r\n\r\nexport default Container\r\n","function Header({ scores }) {\r\n  return (\r\n    <header>\r\n\t\t\t\t<h1>Guess The Word</h1>\r\n\t\t\t\t<div className='scores'>\r\n\t\t\t\t\t<span className='blue'>({scores.blue}) Blue</span>\r\n\t\t\t\t\t<span>vs</span>\r\n\t\t\t\t\t<span className='red'>Red ({scores.red})</span>\r\n\t\t\t\t</div>\r\n\t\t\t</header>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","function Sidebar({ children }) {\r\n\treturn <aside children={children} />\r\n}\r\n\r\nexport default Sidebar\r\n","function Content({ children }) {\r\n\treturn <article children={children} />\r\n}\r\n\r\nexport default Content\r\n","function Hanger() {\r\n  return <div className='hanger' />\r\n}\r\n\r\nexport default Hanger\r\n","function Head() {\r\n\treturn <div className='head' />\r\n}\r\n\r\nexport default Head\r\n","function Neck() {\r\n\treturn <div className='neck' />\r\n}\r\n\r\nexport default Neck\r\n","function LeftArm() {\r\n\treturn <div className='left-arm' />\r\n}\r\n\r\nexport default LeftArm\r\n","function RightArm() {\r\n  return <div className='right-arm' />\r\n}\r\n\r\nexport default RightArm\r\n","function Torso() {\r\n\treturn <div className='torso' />\r\n}\r\n\r\nexport default Torso\r\n","function LeftLeg() {\r\n  return <div className='left-leg' />\r\n}\r\n\r\nexport default LeftLeg\r\n","function RightLeg() {\r\n  return <div className='right-leg' />\r\n}\r\n\r\nexport default RightLeg\r\n","function LooseMsg({ loser }) {\r\n\treturn <div className={`loose-msg bg-${loser}`}>{loser} Loses!</div>\r\n}\r\n\r\nexport default LooseMsg\r\n","import Hanger from './Hanger'\r\nimport Head from './body-parts/Head'\r\nimport Neck from './body-parts/Neck'\r\nimport LeftArm from './body-parts/LeftArm'\r\nimport RightArm from './body-parts/RightArm'\r\nimport Torso from './body-parts/Torso'\r\nimport LeftLeg from './body-parts/LeftLeg'\r\nimport RightLeg from './body-parts/RightLeg'\r\nimport LoseMsg from './LoseMsg'\r\n\r\nfunction Body({ numOfBodyPartsToShow, loser }) {\r\n\tconst bodyParts = [\r\n\t\t<Head key='Head' />,\r\n\t\t<Neck key='Neck' />,\r\n\t\t<LeftArm key='LeftArm' />,\r\n\t\t<RightArm key='RightArm' />,\r\n\t\t<Torso key='Torso' />,\r\n\t\t<LeftLeg key='LeftLeg' />,\r\n\t\t<RightLeg key='RightLeg' />,\r\n\t]\r\n\t\r\n\treturn (\r\n\t\t<div className='body-container'>\r\n\t\t\t<Hanger />\r\n\t\t\t{numOfBodyPartsToShow > 0 && bodyParts.slice(0, numOfBodyPartsToShow)}\r\n\t\t\t{numOfBodyPartsToShow === 7 && <LoseMsg loser={loser} />}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Body\r\n","import { Fragment, useEffect, useRef, useState } from 'react'\nimport Container from './components/Container'\nimport Header from './components/Header'\nimport Sidebar from './components/Sidebar'\nimport Content from './components/Content'\nimport Body from './components/Body'\n\nconst PLAYERS = ['red', 'blue']\nconst INIT_LIFES = 7\n\nconst splitWordCovertToObject = word =>\n\tword.split('').map(letter => ({ letter, discovered: false }))\n\nconst checkWin = word => word.every(({ discovered }) => discovered === true)\n\nconst makeHeartsArray = num => new Array(num).fill('ðŸ’–')\n\nconst getRandomPlayerTurn = () =>\n\tPLAYERS[Math.floor(Math.random() * PLAYERS.length)]\n\nconst switchTurns = currentTurn => (currentTurn === 'red' ? 'blue' : 'red')\n\nfunction App() {\n\tconst [remainigLifes, setRemainigLifes] = useState(INIT_LIFES)\n\tconst [bodyPartsToShow, setBodyPartsToShow] = useState(0)\n\tconst [secretWord, setSecretWord] = useState('')\n\tconst [splitSecretWord, setSplitSecretWord] = useState([])\n\tconst [clue, setClue] = useState('')\n\tconst [gameStarted, setGameStarted] = useState(false)\n\tconst [roundEnded, setRoundEnded] = useState(false)\n\tconst [prevGuesses, setPrevGuesses] = useState('')\n\tconst [challenger, setChallenger] = useState(getRandomPlayerTurn())\n\tconst [opponent, setOpponent] = useState(switchTurns(challenger))\n\tconst [winner, setWinner] = useState('')\n\tconst [scores, setScores] = useState({ red: 0, blue: 0 })\n\tconst [apiStatus, setApiStatus] = useState({ loading: false, error: false })\n\n\tconst letterInput = useRef()\n\n\tconst handleSubmit = e => {\n\t\te.preventDefault()\n\n\t\tif (secretWord) {\n\t\t\tsetSplitSecretWord(splitWordCovertToObject(secretWord))\n\t\t\tsetGameStarted(true)\n\t\t}\n\t}\n\n\tconst getRandomWord = async () => {\n\t\tsetApiStatus(prevStatus => ({ ...prevStatus, loading: true }))\n\t\ttry {\n\t\t\tconst API_URL = 'https://san-random-words.vercel.app/'\n\t\t\tconst response = await fetch(API_URL)\n\t\t\tconst data = await response.json()\n\t\t\tconst { word, definition } = data[0]\n\t\t\tsetSecretWord(word.toLowerCase())\n\t\t\tsetSplitSecretWord(splitWordCovertToObject(word.toLowerCase()))\n\t\t\tsetClue(definition)\n\t\t\tsetGameStarted(true)\n\t\t} catch (error) {\n\t\t\tconsole.log(error.message)\n\t\t\tsetApiStatus(prevStatus => ({\n\t\t\t\t...prevStatus,\n\t\t\t\terror:\n\t\t\t\t\t'Error loading random word. Please try again or enter word manually.',\n\t\t\t}))\n\t\t}\n\t\tsetApiStatus(prevStatus => ({ ...prevStatus, loading: false }))\n\t}\n\n\tconst checkInSecretWord = e => {\n\t\tconst letter = e.target.value.toLowerCase()\n\t\tletterInput.current.blur()\n\t\tif (secretWord.includes(letter)) {\n\t\t\tconst newSplitSecretWord = [...splitSecretWord].map(obj => {\n\t\t\t\tif (obj.letter === letter) obj.discovered = true\n\t\t\t\treturn obj\n\t\t\t})\n\t\t\tsetSplitSecretWord(newSplitSecretWord)\n\t\t\tif (checkWin(splitSecretWord)) {\n\t\t\t\tconst winnerScore = scores[opponent] + 1\n\t\t\t\tsetScores({ ...scores, [opponent]: winnerScore })\n\t\t\t\tsetRoundEnded(true)\n\t\t\t\tsetWinner(opponent)\n\t\t\t}\n\t\t} else {\n\t\t\tsetRemainigLifes(remainigLifes - 1)\n\t\t\tsetBodyPartsToShow(bodyPartsToShow + 1)\n\t\t\tconst wrongLetters =\n\t\t\t\tprevGuesses.length > 0 ? `${prevGuesses}-${letter}` : letter\n\t\t\tsetPrevGuesses(wrongLetters)\n\t\t}\n\t}\n\n\tconst resetGame = () => {\n\t\tsetGameStarted(false)\n\t\tsetRoundEnded(false)\n\t\tsetRemainigLifes(INIT_LIFES)\n\t\tsetBodyPartsToShow(0)\n\t\tsetPrevGuesses('')\n\t\tsetChallenger(switchTurns(challenger))\n\t\tsetOpponent(switchTurns(opponent))\n\t}\n\n\tuseEffect(() => {\n\t\tif (remainigLifes === 0) {\n\t\t\tsetRoundEnded(true)\n\t\t\tsetWinner(challenger)\n\t\t\tsetScores(prevScores => ({\n\t\t\t\t...prevScores,\n\t\t\t\t[challenger]: prevScores[challenger] + 1,\n\t\t\t}))\n\t\t}\n\t}, [remainigLifes, challenger])\n\n\treturn (\n\t\t<Container>\n\t\t\t<Header scores={scores} />\n\t\t\t<Sidebar>\n\t\t\t\t<Body numOfBodyPartsToShow={bodyPartsToShow} loser={winner === 'red' ? 'blue' : 'red'} />\n\t\t\t</Sidebar>\n\t\t\t<Content>\n\t\t\t\t{gameStarted ? (\n\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t<div className='secret-word'>\n\t\t\t\t\t\t\t{splitSecretWord.map(({ letter, discovered }, idx) => (\n\t\t\t\t\t\t\t\t<div key={idx} className='secret-letter'>\n\t\t\t\t\t\t\t\t\t{discovered ? letter : <span className='red'>?</span>}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='letter-input'>\n\t\t\t\t\t\t\t{roundEnded ? (\n\t\t\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t<span className={winner}>{winner}</span> wins! ðŸ¥‡\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t{winner === challenger && (\n\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\tSecret word was: <span>{secretWord}</span>\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t<button type='button' onClick={resetGame}>\n\t\t\t\t\t\t\t\t\t\tStart New Round\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\tref={letterInput}\n\t\t\t\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\t\t\t\tmaxLength='1'\n\t\t\t\t\t\t\t\t\t\tplaceholder='Enter guess'\n\t\t\t\t\t\t\t\t\t\tonChange={checkInSecretWord}\n\t\t\t\t\t\t\t\t\t\tonClick={e => (e.target.value = '')}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t<span className={opponent}>{opponent}</span>'s lifes:{' '}\n\t\t\t\t\t\t\t\t\t\t{makeHeartsArray(remainigLifes).map((heart, idx) => (\n\t\t\t\t\t\t\t\t\t\t\t<span key={idx}>{heart}</span>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t{clue && (\n\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\tðŸ’¡ Here is a clue: <span className='clue'>{clue}</span>\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t{prevGuesses && (\n\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\tWrong guesses: <span>{prevGuesses}</span>\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Fragment>\n\t\t\t\t) : (\n\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tIt&apos;s <span className={challenger}>{challenger}</span>&apos;s\n\t\t\t\t\t\t\tturn to challenge <span className={opponent}>{opponent}</span>!\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\t\tplaceholder='Enter secret word'\n\t\t\t\t\t\t\t\tonChange={e => setSecretWord(e.target.value.toLowerCase())}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<button type='submit'>Save</button>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t\t<p>or</p>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\tonClick={getRandomWord}\n\t\t\t\t\t\t\tdisabled={apiStatus.loading}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{apiStatus.loading ? 'Loading...' : 'Get Random Secret Word'}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t{apiStatus.error && (\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t<span>{apiStatus.error}</span>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Fragment>\n\t\t\t\t)}\n\t\t\t</Content>\n\t\t</Container>\n\t)\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}